# ============================================
# AlignCV V2 - Environment Configuration
# ============================================
# 
# INSTRUCTIONS:
# 1. Copy this file to .env
# 2. Replace all PLACEHOLDER values with your actual credentials
# 3. NEVER commit the .env file to git
#
# ============================================

# ============================================
# DATABASE (Supabase PostgreSQL)
# ============================================
# Get from Supabase Dashboard > Project Settings > Database > Connection string
# Format: postgresql://postgres:[YOUR-PASSWORD]@db.xxx.supabase.co:5432/postgres
DATABASE_URL=postgresql://postgres:YOUR_PASSWORD@db.xyz.supabase.co:5432/postgres

# ============================================
# SUPABASE (PostgreSQL + Storage)
# ============================================
# Get from Supabase Dashboard > Project Settings > API
# Project URL (e.g., https://xyz.supabase.co)
SUPABASE_URL=https://your-project.supabase.co
# Anon (public) key - starts with eyJ...
SUPABASE_ANON_KEY=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
# Service Role (secret) key - starts with eyJ... - ⚠️ KEEP SECRET!
SUPABASE_SERVICE_ROLE_KEY=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
# Storage bucket name (create in Storage section)
SUPABASE_STORAGE_BUCKET=aligncv-resumes

# ============================================
# JWT AUTHENTICATION
# ============================================
# Generate a secure random secret: python -c "import secrets; print(secrets.token_urlsafe(32))"
JWT_SECRET_KEY=PLACEHOLDER_JWT_SECRET_KEY_CHANGE_THIS_TO_RANDOM_STRING
JWT_ALGORITHM=HS256
JWT_ACCESS_TOKEN_EXPIRE_MINUTES=15
JWT_REFRESH_TOKEN_EXPIRE_DAYS=7

# ============================================
# GOOGLE OAUTH2
# ============================================
# Get credentials from: https://console.cloud.google.com/apis/credentials
GOOGLE_CLIENT_ID=PLACEHOLDER_GOOGLE_CLIENT_ID
GOOGLE_CLIENT_SECRET=PLACEHOLDER_GOOGLE_CLIENT_SECRET
GOOGLE_REDIRECT_URI=http://localhost:8000/v2/auth/google/callback

# ============================================
# AI MODELS - LLaMA 3.1 via Groq (Recommended)
# ============================================
# Get FREE API key from: https://console.groq.com/
# Groq provides fast inference for LLaMA 3.1 8B Instant (100% free)
GROQ_API_KEY=PLACEHOLDER_GROQ_API_KEY
GROQ_MODEL=llama-3.1-8b-instant

# Legacy Mistral AI support (optional, deprecated)
# Get API key from: https://console.mistral.ai/
MISTRAL_API_KEY=PLACEHOLDER_MISTRAL_API_KEY
MISTRAL_MODEL=mistral-small-latest

# ============================================
# QDRANT VECTOR DATABASE
# ============================================
# Get from: https://cloud.qdrant.io/
# Free tier: 1GB cluster
QDRANT_API_KEY=PLACEHOLDER_QDRANT_API_KEY
QDRANT_URL=https://PLACEHOLDER_CLUSTER_ID.qdrant.io
QDRANT_COLLECTION_NAME=aligncv_jobs

# ============================================
# SENDGRID EMAIL
# ============================================
# Get API key from: https://app.sendgrid.com/settings/api_keys
# Free tier: 100 emails/day
SENDGRID_API_KEY=PLACEHOLDER_SENDGRID_API_KEY
SENDGRID_FROM_EMAIL=noreply@aligncv.com
SENDGRID_FROM_NAME=AlignCV

# ============================================
# REDIS (Task Queue & Caching)
# ============================================
# Free options: Upstash (10K commands/day), Redis Labs (30MB)
# Format: redis://username:password@host:port
REDIS_URL=redis://PLACEHOLDER_USERNAME:PLACEHOLDER_PASSWORD@PLACEHOLDER_HOST:6379

# ============================================
# FILE STORAGE
# ============================================
# Storage backend: 'local', 'supabase', or 's3'
# - 'local': Store files on server disk (good for dev, lost on redeploy)
# - 'supabase': Store in Supabase Storage (RECOMMENDED - free 1GB) ⭐
# - 's3': Store in AWS S3 (enterprise option)
STORAGE_BACKEND=supabase

# Local storage path (if using STORAGE_BACKEND=local)
LOCAL_STORAGE_PATH=./storage/uploads

# Max file size in MB (applies to all storage backends)
MAX_FILE_SIZE_MB=5

# ============================================
# APPLICATION
# ============================================
# Environment: development, staging, production
ENVIRONMENT=development
# Enable debug logging
DEBUG=true
# CORS allowed origins (comma-separated)
CORS_ORIGINS=http://localhost:3000,http://localhost:8501,http://localhost:8502

# ============================================
# SPACY NLP
# ============================================
# SpaCy model to use (download with: python -m spacy download en_core_web_sm)
SPACY_MODEL=en_core_web_sm
